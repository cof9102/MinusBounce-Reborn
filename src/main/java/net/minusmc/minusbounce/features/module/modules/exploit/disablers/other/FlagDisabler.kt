package net.minusmc.minusbounce.features.module.modules.exploit.disablers.other

import net.minusmc.minusbounce.features.module.modules.exploit.disablers.DisablerMode
import net.minusmc.minusbounce.event.SentPacketEvent
import net.minusmc.minusbounce.event.ReceivedPacketEvent
import net.minusmc.minusbounce.value.IntegerValue
import net.minusmc.minusbounce.value.BoolValue
import net.minusmc.minusbounce.value.ListValue
import net.minusmc.minusbounce.utils.PacketUtils
import net.minecraft.network.play.client.C03PacketPlayer
import net.minecraft.network.play.client.C03PacketPlayer.C04PacketPlayerPosition
import net.minecraft.network.play.client.C03PacketPlayer.C06PacketPlayerPosLook
import net.minecraft.network.play.server.S08PacketPlayerPosLook

import kotlin.math.sqrt

class FlagDisabler : DisablerMode("Flag") {
	private val flagMode = ListValue("Mode", arrayOf("Edit", "Packet"), "Edit")
	private val flagTick = IntegerValue("TickDelay", 25, 1, 200)
	private val flagSilent = BoolValue("SilentMode", true)

	override fun onSentPacket(event: SentPacketEvent) {
		mc.thePlayer ?: return

		val packet = event.packet

		if (packet is C03PacketPlayer && flagMode.get().equals("edit", true) && mc.thePlayer.ticksExisted > 0 && mc.thePlayer.ticksExisted % flagTick.get() == 0) {
			packet.isMoving = false
			packet.onGround = false
			packet.y = -0.08

			debug("flagged")
		}
	}

	override fun onReceivedPacket(event: ReceivedPacketEvent) {
		mc.thePlayer ?: return
		val packet = event.packet

		if (packet is S08PacketPlayerPosLook && flagSilent.get()) {
			if (mc.thePlayer.ticksExisted <= 0)
				return

            val x = packet.x - mc.thePlayer.posX
            val y = packet.y - mc.thePlayer.posY
            val z = packet.z - mc.thePlayer.posZ
            val diff = sqrt(x * x + y * y + z * z)

			if (diff <= 8) {
				event.isCancelled = true
				PacketUtils.sendPacketNoEvent(C06PacketPlayerPosLook(packet.x, packet.y, packet.z, packet.yaw, packet.pitch, true))

				debug("silent s08 accept")
			}
		}
	}

	override fun onUpdate() {
		if (flagMode.get().equals("packet", true) && mc.thePlayer.ticksExisted > 0 && mc.thePlayer.ticksExisted % flagTick.get() == 0) {
			PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, -0.08, mc.thePlayer.posZ, mc.thePlayer.onGround))
			debug("flagged")
		}
	}

}