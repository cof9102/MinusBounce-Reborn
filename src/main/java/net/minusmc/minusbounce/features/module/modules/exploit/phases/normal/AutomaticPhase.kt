package net.minusmc.minusbounce.features.module.modules.exploit.phases.normal

import net.minecraft.block.BlockAir
import net.minecraft.util.AxisAlignedBB
import net.minusmc.minusbounce.event.SentPacketEvent
import net.minusmc.minusbounce.event.BlockBBEvent
import net.minusmc.minusbounce.features.module.modules.exploit.phases.PhaseMode
import net.minusmc.minusbounce.utils.timer.MSTimer
import net.minusmc.minusbounce.utils.block.BlockUtils
import net.minusmc.minusbounce.value.BoolValue
import net.minusmc.minusbounce.value.FloatValue
import net.minusmc.minusbounce.value.IntegerValue
import net.minecraft.network.play.client.C03PacketPlayer

class AutomaticPhase: PhaseMode("Automatic") {
    private val offsetYValue = FloatValue("OffsetY", 4.0f, -8.0f, 8.0f)
    private val phaseDelayValue = IntegerValue("PhaseDelay", 1000, 500, 5000)
    private val freezeMotionValue = BoolValue("FreezeMotion", true)

    private val timer = MSTimer()
    private var aClip = true

    override fun onEnable() {
        timer.reset()
        aClip = true
    }

    override fun onUpdate() {
        if (timer.hasTimePassed(phaseDelayValue.get())) {
            if (aClip) {
                aClip = false
                mc.thePlayer.setPosition(mc.thePlayer.posX, mc.thePlayer.posY - offsetYValue.get(), mc.thePlayer.posZ)
            }
        } else if (freezeMotionValue.get()) {
            mc.thePlayer.motionX = 0.0
            mc.thePlayer.motionZ = 0.0
        }
    }

    override fun onSentPacket(event: SentPacketEvent) {
        val packet = event.packet
        if (packet is C03PacketPlayer && !mc.netHandler.doneLoadingTerrain) {
            timer.reset()
            aClip = true
        }
    }

    override fun onBlockBB(event: BlockBBEvent) {
        val entityBoundingBox = mc.thePlayer.entityBoundingBox ?: return
        val boundingBox = event.boundingBox ?: return
        if (BlockUtils.collideBlockIntersects(entityBoundingBox) { it !is BlockAir } && boundingBox.maxY > entityBoundingBox.minY)
            event.boundingBox = AxisAlignedBB(boundingBox.maxX, entityBoundingBox.minY, boundingBox.maxZ, boundingBox.minX, boundingBox.minY, boundingBox.minZ)
    }
}