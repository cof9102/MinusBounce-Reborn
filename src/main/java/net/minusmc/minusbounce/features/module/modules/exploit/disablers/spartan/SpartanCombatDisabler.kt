package net.minusmc.minusbounce.features.module.modules.exploit.disablers.spartan

import net.minusmc.minusbounce.features.module.modules.exploit.disablers.DisablerMode
import net.minusmc.minusbounce.event.SentPacketEvent
import net.minusmc.minusbounce.utils.PacketUtils
import net.minusmc.minusbounce.utils.timer.MSTimer
import net.minecraft.network.play.client.C00PacketKeepAlive
import net.minecraft.network.play.client.C0FPacketConfirmTransaction

class SpartanCombatDisabler : DisablerMode("SpartanCombat") {

	private val keepAlives = mutableListOf<C00PacketKeepAlive>()
	private val transactions = mutableListOf<C0FPacketConfirmTransaction>()

	private val msTimer = MSTimer()

	override fun onEnable() {
		msTimer.reset()
	}

	override fun onDisable() {
		keepAlives.forEach { PacketUtils.sendPacketNoEvent(it) }
		keepAlives.clear()

		transactions.forEach { PacketUtils.sendPacketNoEvent(it) }
		transactions.clear()
	}

	override fun onWorld() {
		keepAlives.clear()
		transactions.clear()
		msTimer.reset()
	}

	override fun onUpdate() {
		if (msTimer.hasTimePassed(3000L) && keepAlives.size > 0 && transactions.size > 0) {
			PacketUtils.sendPacketNoEvent(keepAlives.last())
			PacketUtils.sendPacketNoEvent(transactions.last())

			debug("c00 latest packet sent.")
			debug("c0f latest packet sent.")

			keepAlives.clear()
			transactions.clear()
			msTimer.reset()
		}
	}

	override fun onSentPacket(event: SentPacketEvent) {
		val packet = event.packet
		if (packet is C00PacketKeepAlive) {
			debug("c00 added")
    		keepAlives.add(packet)
    		event.isCancelled = true
		}

		if (packet is C0FPacketConfirmTransaction) {
			debug("c0f added")
    		transactions.add(packet)
    		event.isCancelled = true
		}
	}
}
