package net.minusmc.minusbounce.features.module.modules.exploit.disablers.other

import net.minusmc.minusbounce.event.*
import net.minusmc.minusbounce.value.*
import net.minusmc.minusbounce.utils.timer.*
import net.minusmc.minusbounce.utils.*
import net.minusmc.minusbounce.features.module.modules.exploit.disablers.DisablerMode
import net.minecraft.network.play.client.C0FPacketConfirmTransaction
import net.minecraft.network.play.server.S08PacketPlayerPosLook
import net.minecraft.network.play.server.S32PacketConfirmTransaction
import net.minecraft.network.play.INetHandlerPlayServer
import net.minecraft.network.Packet

/**
 * A disabler that delay transaction on some anticheat like Grim (<=2.3.59) and old Intave
 * @author Fyxar
 */

class DelayedTransaction : DisablerMode("DelayedTransaction") {
    private var delay = false
    private val packets = mutableListOf<Packet<INetHandlerPlayServer>>()

    override fun onDisable() {
        mc.timer.timerSpeed = 1F

        if (mc.thePlayer != null)
            packets.map { it }.forEach { PacketUtils.receivePacketNoEvent(it) }

        packets.clear()
        delay = false
    }

    override fun onReceivedPacket(event: ReceivedPacketEvent) {
        if (mc.thePlayer == null || mc.thePlayer.ticksExisted < 20) {
            packets.clear()
            return
        }

        val packet = event.packet

        if (mc.thePlayer.capabilities.isFlying || mc.thePlayer.capabilities.allowFlying)
            if (!delay && packet is S08PacketPlayerPosLook)
                delay = true

        if (delay && packet is S32PacketConfirmTransaction) {
            packets.add(packet as Packet<INetHandlerPlayServer>)
            event.isCancelled = true
        }
    }
}