package net.minusmc.minusbounce.features.module.modules.exploit.phases.normal


import net.minusmc.minusbounce.event.BlockBBEvent
import net.minusmc.minusbounce.features.module.modules.exploit.phases.PhaseMode
import net.minusmc.minusbounce.utils.block.BlockUtils
import net.minusmc.minusbounce.utils.misc.MathUtils
import net.minecraft.network.play.client.C03PacketPlayer.C04PacketPlayerPosition
import net.minecraft.util.AxisAlignedBB
import net.minecraft.block.BlockAir

import kotlin.math.sin
import kotlin.math.cos

class VanillaPhase : PhaseMode("Vanilla") {
	private var ticks = 0

	override fun onUpdate() {
        val isInsideBlock = BlockUtils.collideBlockIntersects(mc.thePlayer.entityBoundingBox) { it !is BlockAir }

        if (isInsideBlock) {
			mc.thePlayer.noClip = true
            mc.thePlayer.motionY = 0.0
            mc.thePlayer.onGround = true
		}

		if (!mc.thePlayer.onGround || ticks <= 2 || !mc.thePlayer.isCollidedHorizontally || (isInsideBlock && !mc.thePlayer.isSneaking)) {
            ticks++
            return
        }
            
        mc.netHandler.addToSendQueue(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true))
        mc.netHandler.addToSendQueue(C04PacketPlayerPosition(0.5, 0.0, 0.5, true))
        mc.netHandler.addToSendQueue(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true))
        mc.netHandler.addToSendQueue(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY + 0.2, mc.thePlayer.posZ, true))
        mc.netHandler.addToSendQueue(C04PacketPlayerPosition(0.5, 0.0, 0.5, true))
        mc.netHandler.addToSendQueue(C04PacketPlayerPosition(mc.thePlayer.posX + 0.5, mc.thePlayer.posY, mc.thePlayer.posZ + 0.5, true))

        val yaw = MathUtils.toRadians(mc.thePlayer.rotationYaw)
        val x = sin(yaw) * 0.04
        val z = cos(yaw) * 0.04

        mc.thePlayer.setPosition(mc.thePlayer.posX - x, mc.thePlayer.posY, mc.thePlayer.posZ + z)
        ticks++
	}

    override fun onBlockBB(event: BlockBBEvent) {
        val entityBoundingBox = mc.thePlayer.entityBoundingBox ?: return
        val boundingBox = event.boundingBox ?: return
        if (BlockUtils.collideBlockIntersects(entityBoundingBox) { it !is BlockAir } && boundingBox.maxY > entityBoundingBox.minY)
            event.boundingBox = AxisAlignedBB(boundingBox.maxX, entityBoundingBox.minY, boundingBox.maxZ, boundingBox.minX, boundingBox.minY, boundingBox.minZ)
    }
}
