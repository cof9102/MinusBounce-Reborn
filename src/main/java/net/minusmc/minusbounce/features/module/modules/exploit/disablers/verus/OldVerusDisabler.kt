package net.minusmc.minusbounce.features.module.modules.exploit.disablers.verus


import net.minusmc.minusbounce.features.module.modules.exploit.disablers.DisablerMode
import net.minusmc.minusbounce.event.ReceivedPacketEvent
import net.minusmc.minusbounce.event.SentPacketEvent
import net.minusmc.minusbounce.utils.PacketUtils
import net.minecraft.network.play.client.C03PacketPlayer
import net.minecraft.network.play.server.S08PacketPlayerPosLook
import net.minecraft.network.play.client.C0FPacketConfirmTransaction
import net.minecraft.network.play.client.C03PacketPlayer.C04PacketPlayerPosition
import net.minecraft.network.play.client.C03PacketPlayer.C06PacketPlayerPosLook

import kotlin.math.sqrt
import kotlin.math.round

class OldVerusDisabler : DisablerMode("OldVerus") {
	private val packetQueue = mutableListOf<C0FPacketConfirmTransaction>()

	override fun onDisable() {
		packetQueue.clear()
	}

	override fun onWorld() {
		packetQueue.clear()
	}

	override fun onUpdate() {
		if (mc.thePlayer.ticksExisted % 180 != 0)
			return

		while (packetQueue.size > 22) {
			PacketUtils.sendPacketNoEvent(packetQueue.removeFirst())
		}

		debug("pushed queue until size < 22.")
	}

	override fun onSentPacket(event: SentPacketEvent) {
		val packet = event.packet

		if (packet is C03PacketPlayer) {
			val yPos = round(mc.thePlayer.posY / 0.015625) * 0.015625
			mc.thePlayer.setPosition(mc.thePlayer.posX, yPos, mc.thePlayer.posZ)

			if (mc.thePlayer.ticksExisted % 45 == 0) {
				debug("flag")
				PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true))
    			PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY - 11.725, mc.thePlayer.posZ, false))
    			PacketUtils.sendPacketNoEvent(C04PacketPlayerPosition(mc.thePlayer.posX, mc.thePlayer.posY, mc.thePlayer.posZ, true))
			}
		}

		if (packet is C0FPacketConfirmTransaction && packet.uid !in 1..99) {
			repeat (4) {
				packetQueue.add(packet)
			}
			event.isCancelled = true
			debug("c0f dupe: 4x")
		}
	}

	override fun onReceivedPacket(event: ReceivedPacketEvent) {
		val packet = event.packet

		if (packet is S08PacketPlayerPosLook && mc.thePlayer.ticksExisted > 0) {
            val x = packet.x - mc.thePlayer.posX
            val y = packet.y - mc.thePlayer.posY
            val z = packet.z - mc.thePlayer.posZ
            val diff = sqrt(x * x + y * y + z * z)

			if (diff <= 8) {
				event.isCancelled = true
				PacketUtils.sendPacketNoEvent(C06PacketPlayerPosLook(packet.x, packet.y, packet.z, packet.yaw, packet.pitch, true))
				debug("silent s08 accept")
			}
		}
	}
}
